#!/usr/bin/python

# graphic model of a Staubli RX60L

from vismach import *
import hal

c = hal.component("staublirx60lgui")
c.newpin("joint1", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint2", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint3", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint4", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint5", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("joint6", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("grip", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("tool-offset", hal.HAL_FLOAT, hal.HAL_IN)
c.ready()


pivot_len=100
tool_radius=25

# add a XYZ cross for debug
floor = Collection([
	Box(-100,-100,-0.1,100,100,0),
	Box(-10,-0.1,-10,10,0,10),
	Box(-0.1,-10,-10,0,10,10),
	Color([1,0,0,1],[Box(-10,-10,9.9,10,10,10)]),
	Color([0.3,0.3,0.3,1],[Box(400,-400,-4,-400,400,10)])])
# units are mm
#floor = Color([0,0,1,0],[floor])

work = Capture()

# Comment from pumagui file: "tool goes here.. maybe later"
tool = Capture()
#tool = Color([1,0,0,1],[tool])
tooltip = Capture()
#tooltip = Capture()
#tool = CylinderZ(40, 2, 0.0, 2)
tool = Color([1,1,1,1],[tool])
tool = Translate([tool],0,0, -40)
tool = HalTranslate([tool],c,"tool-offset",0,0,-1)
#tooltip = Translate([tooltip],0,49,1206)



#tool = Collection([tooltip, tool])
# Comment from pumagui file: "tooltip" for backplot will be the tip of the tool, for now link7

tool = Collection([tool, tooltip])
#tool = Translate([tool],0,49,1230)
tool = Translate([tool],0,49,1246)
#tool = Rotate([tool],180,1,0,0)


# link 7
link7 = AsciiSTL(filename="/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/vismach/staubli/rx60bl_hb6.stl")
link7 = Color([0.7,0.7,0.7,1],[link7])
link7 = Collection([link7, tool])
#link7 = Rotate([link7],180,0,1,0)
link7 = Translate([link7],0,-49,-1141)
link7 = HalRotate([link7],c,"joint6",1,0,1,0)

# link 6
link6 = AsciiSTL(filename="/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/vismach/staubli/rx60bl_hb5.stl")
link6 = Color([0.7,0.7,0.7,1],[link6])
link6 = Translate([link6], 0,-49,-1141)
link6 = Rotate([link6],0,0,1,0)
 

# mount link7 on it
link6 = Collection([link7, link6])
#apply HAL DOF
link6 = Rotate([link6],90,0,1,0)
link6 = HalRotate([link6],c,"joint5",1,0,1,0)

# link 5, wrist
link5 = AsciiSTL(filename="/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/vismach/staubli/rx60bl_hb4.stl")
link5 = Color([1,0.8431,0,1],[link5])
link5 = Translate([link5],0,-49,-1141)
link5 = Rotate([link5], 90,0,1,0)


# assemble
link5 = Collection([link6, link5])
link5 = Translate([link5],0,0,290)
link5 = Translate([link5],290,0,-290)
#link5 = Rotate([link5], 90,0,1,0)
#apply HAL DOF
link5 = HalRotate([link5],c,"joint4",1,1,0,0) 

# link4
link4 = AsciiSTL(filename="/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/vismach/staubli/rx60bl_hb3.stl")
link4 = Translate([link4],0,-49,-851)

link4 = Rotate([link4],90,0,1,0)


#assemble 
link4 = Color([1,0.8431,0,1],[link4])
link4 = Collection([link5, link4])
link4 = Translate([link4],0,49,110)
link4 = Translate([link4], 110, 0,-110)
link4 = Rotate([link4],-180,0,1,0)
link4 = HalRotate([link4],c,"joint3",1,0,1,0)

# link 3, shoulder
link3 = AsciiSTL(filename="/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/vismach/staubli/rx60bl_hb2.stl")
link3 = Color([1,0.8431,0,1],[link3])
link3 = Translate([link3],0,0,-400)



#assemble
link3 = Collection([link4, link3])
link3 = Rotate([link3],90,0,1,0)
link3 = Translate([link3],400,0,0)
link3 = HalRotate([link3],c,"joint2",1,0,1,0)

# link 2
link2 = AsciiSTL(filename="/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/vismach/staubli/rx60bl_hb1.stl")
link2 = Color([1,0.8431,0,1],[link2])
link2 = Translate([link2], 0,0,-341) #link length from base to first joint from staubli manual
link2 = Collection([link3, link2])
link2 = Translate([link2],0,0,341)
link2 = Rotate([link2], 180,0,0,1)

link2 = HalRotate([link2],c,"joint1",1,0,0,1)

# link 1
link1 = AsciiSTL(filename="/usr/share/doc/linuxcnc/examples/sample-configs/sim/axis/vismach/staubli/rx60bl_hb.stl");
link1 = Color([0.5,0.5,0.5,1],[link1])
link1 = Rotate([link1], 180,0,0,1)

# stationary base
puma = Collection([link2, link1])

model = Collection([tooltip, puma, floor, work])

main(model, tooltip, work, 1000, lat=0, lon=0)
